Problem :: Implementing Dijkstra Algorithm
Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j
denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's 
from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.
 

Note: The Graph doesn't contain any negative weight cycle.
Time Complexity :: O(V + Elog V)
Space Complexity ::O(v)

Solution ::
#define p pair<int,int>
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int v, vector<vector<int>> adj[], int s)
    {
        vector<int>dist(v , INT_MAX);
        dist[s] =0;
        priority_queue<p , vector<p> , greater<p>>pq;
        pq.push({s , 0});
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            int node = it.first;
            int d = it.second;
            for(auto k :adj[node]){
                int neighbour = k[0];
                int dis = k[1];
                if(dist[neighbour] > d + dis ){
                    pq.push({neighbour , d+dis});
                    dist[neighbour] = d+dis;
                }
            }
        }
        return dist;
    }
};
