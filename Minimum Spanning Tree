Problem ::  Minimum Spanning Tree
Given a weighted, undirected, and connected graph with V vertices and E edges, your task is to find the sum of the weights of the edges in the Minimum Spanning Tree (MST) of the graph.
The graph is represented by an adjacency list, where each element adj[i] is a vector containing pairs of integers. 
Each pair represents an edge, with the first integer denoting the endpoint of the edge and the second integer denoting the weight of the edge.

Time Complexity ::  O(E * log V)
Space Complexity :: O(V)
Space Complexity :: 

Code :: 
class DisJoint{
    vector<int>parent , size;
    public :
    DisJoint(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0 ; i<n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int find_parent(int u){
        if(parent[u] == u)return u;
        return parent[u] = find_parent(parent[u]);
    }
    
    void UnionBySize(int u , int v){
        int ult_u = find_parent(u);
        int ult_v = find_parent(v);
        if(ult_u == ult_v)return;
        if(size[ult_u]<size[ult_v]){
            parent[ult_u] = ult_v;
            size[ult_v]+= size[ult_u];
        }
        else{
            parent[ult_v] = ult_u;
            size[ult_u]+=size[ult_v];
        }
    }
};

class Solution
{   
   
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
         vector<pair<int  , pair<int,int>>>v;
         for(int i= 0 ; i<V ; i++){
             for(auto it:adj[i]){
                 int wt = it[1];
                 int adjnode = it[0];
                 int node = i;
                 v.push_back({wt , {node , adjnode}});
             }
         }
         DisJoint ds(V);
         sort(v.begin() , v.end());
         int sum =0;
         for(auto it:v){
             int wt = it.first;
             int u = it.second.first;
             int v = it.second.second;
             if(ds.find_parent(u)!=ds.find_parent(v)){
                 sum+=wt;
                 ds.UnionBySize(u , v);
             }
         }
         return sum;
    }
};
