Problem ::  
Connecting the graph

You are given a graph with n vertices (0 to n-1) and m edges. You can remove one edge from anywhere and add that edge between any two vertices in one operation. Find the minimum number of operations that will be required to connect the graph.
If it is not possible to connect the graph, return -1.

Time Complexity :: O(E log V)
Space Complexity :: O(E)

Code ::
class DisJoint{
    public :
      vector<int>parent , size;
    DisJoint(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0 ; i<n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int find_parent(int u){
        if(parent[u] == u)return u;
        return parent[u] = find_parent(parent[u]);
    }
    
    void UnionBySize(int u , int v){
        int ult_u = find_parent(u);
        int ult_v = find_parent(v);
        if(ult_u == ult_v)return;
        if(size[ult_u]<size[ult_v]){
            parent[ult_u] = ult_v;
            size[ult_v]+= size[ult_u];
        }
        else{
            parent[ult_v] = ult_u;
            size[ult_u]+=size[ult_v];
        }
    }
};
class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        int cnt=0;
        DisJoint ds(n);
        for( auto it:edge){
            int u = it[0];
            int v = it[1];
            if(ds.find_parent(u)==ds.find_parent(v))cnt++;
            else{
                ds.UnionBySize(u,v);
            }
        }
         int c =0;
        for(int i=0 ; i<n;i++){
            if(ds.parent[i] ==i) c++;
        }  
        if(c-1 <=cnt)return c-1;
        return -1;
    }
};
