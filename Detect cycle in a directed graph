Problem :: Detect cycle in a directed graph
Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Time Complexity :: O(V*E)
Space Complexity :: O(V)

Code ::
class Solution {
    bool dfs(int vis[] , int pathvis[] , vector<int>adj[] , int sr){
        
        vis[sr] = 1;
        pathvis[sr] = 1;
        for(auto it:adj[sr]){
            if(!vis[it] && dfs(vis, pathvis ,adj  , it))return 1;
            else if(pathvis[it])return 1; // if vis[it] and pathvis[it] both are visited then it means cycle is present
        }
        pathvis[sr] = 0; // unmark the pathvis
        return 0;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V] = {0};
        int pathvis[V] ={0};
        for(int  i= 1 ; i<V; i++){
            if(!vis[i] && dfs(vis , pathvis , adj , i))return 1;
        }
        return 0;
    }
};
