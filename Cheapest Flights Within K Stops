Problem ::  Cheapest Flights Within K Stops
There are n cities and m edges connected by some number of flights. You are given an array flights,
where flights[i] = [fromi, toi, pricei] indicates that there is a flight from the city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

Note: The price from city A to B may be different From the price from city B to A.

Time Complexity :: O(N) // N = flight.size()
Space Complexity :: O(N)

class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int k)  {
        vector<pair<int,int>>adj[n];
        for(auto it:flights){
            adj[it[0]].push_back({it[1] ,it[2]});
        }
        queue<pair<int,pair<int,int>>>q;
        q.push({0 , {src , 0}}) ;
        vector<int>dist(n , 1e9);
        dist[src] =0;
      
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int stops = it.first;
            int node = it.second.first;
            int dis = it.second.second;
            if(k<stops)continue;
            for(auto adjnode : adj[node]){
                int neigh = adjnode.first;
                int d = adjnode.second;
                if(d + dis < dist[neigh] && stops<=k){
                    dist[neigh] = dis + d;
                    q.push({stops+1 , {neigh , dis+d}});
                }
            }
        }
        if(dist[dst]==1e9)return -1;
        return dist[dst];
    }
};
