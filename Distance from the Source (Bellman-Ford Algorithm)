Problem :: Distance from the Source (Bellman-Ford Algorithm)
Given a weighted and directed graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex S. 
If a vertices can't be reach from the S then mark the distance as 10^8. Note: If the Graph contains a negative cycle then return an array consisting of only -1.

Time Complexity :: O(V*E)
Space Complexity :: O(n)

Code ::
class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        vector<int>dist(V ,1e8);
        dist[S] = 0;
        for(int  i=0 ; i<V-1 ; i++){
            for (auto it:edges){
                int u = it[0];
                int v =it[1];
                int dis = it[2];
                if(dist[u]!=1e8 && dist[u] + dis <dist[v]){
                    dist[v] = dist[u]+dis;
                }
            }
        }
        for(auto it:edges){
            int u = it[0];
                int v =it[1];
                int dis = it[2];
                if(dist[u]!=1e8 && dist[u] + dis <dist[v]){
                   return {-1};
              }
        }
        return dist;
    }
};
